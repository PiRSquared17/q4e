package org.devzuz.q.maven.wizard.core;

import java.util.List;

import org.devzuz.q.maven.embedder.IMavenExecutionResult;
import org.devzuz.q.maven.embedder.IMavenProject;
import org.devzuz.q.maven.embedder.MavenExecutionJobAdapter;
import org.devzuz.q.maven.embedder.MavenManager;
import org.devzuz.q.maven.jdt.ui.projectimport.ScanImportProjectJob;
import org.devzuz.q.maven.wizard.MavenWizardActivator;
import org.devzuz.q.maven.wizard.postprocessor.core.IMavenProjectPostprocessor;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.jobs.IJobChangeEvent;
import org.eclipse.core.runtime.jobs.JobChangeAdapter;

public class ArchetypeGenerationJobAdapter extends MavenExecutionJobAdapter
{
    private final IPath generatedDir;

    private final IMavenWizardContext wizardContext;

    /**
     * Creates a new maven job adapter for handling archetype creation.
     * 
     * @param generatedDir
     *            the target folder for the generated archetype.
     * @param wizardContext
     *            additional information provided through new project wizard extensions.
     */
    public ArchetypeGenerationJobAdapter( IPath generatedDir, IMavenWizardContext wizardContext )
    {
        this.generatedDir = generatedDir;
        this.wizardContext = wizardContext;
    }
    
    @Override
    public void done( IJobChangeEvent event, IMavenExecutionResult result )
    {
        ScanImportProjectJob job = new ScanImportProjectJob( generatedDir.toFile() );
        job.addJobChangeListener( new JobChangeAdapter()
        {
            @Override
            public void done( IJobChangeEvent event )
            {
                if ( event.getResult().getSeverity() == IStatus.OK )
                {
                    List<IProject> pomDescriptors =
                        ( (ScanImportProjectJob) event.getJob() ).getImportedProjects();
                    applyPostProcessors( pomDescriptors );
                }
            }
        } );
        job.schedule();
    }
    
    /**
     * Applies the registered postprocessors to every project generated by the archetype.
     * 
     * @param importedProjects
     */
    protected void applyPostProcessors( List<IProject> importedProjects )
    {
        List<IMavenProjectPostprocessor> allPostProcessors = wizardContext.getPostProcessors();
        for ( IProject project : importedProjects )
        {
            IMavenProject mavenProject;
            try
            {
                // Resolve the pom to a full IMavenProject.
                // TODO: Should delegate to the Processor? Maybe most of them won't need so much info.
                mavenProject = MavenManager.getMavenProjectManager().getMavenProject( project, false );
                for ( IMavenProjectPostprocessor postProcessor : allPostProcessors )
                {
                    postProcessor.run( mavenProject );
                }
            }
            catch ( CoreException e )
            {
                // TODO: Throw an exception and inform the user
                MavenWizardActivator.log( "Could not resolve the Maven Project.", e );
            }
        }
    }
}
